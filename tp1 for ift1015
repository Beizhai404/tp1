couleur = ["#fff", "#000", "#f00", "#ff0", "#0f0", "#00f", "#f0f", "#888"]
largeur = 180
hauteur = 120
taille = 12
longueurCadre = 1
espace = 6
nombreCouleur = 8
hauteurMenu = 24

def carre(x, y, largeur, hauteur, numbre):
    fillRectangle(x, y, largeur, hauteur, couleur[numbre])
    
def boutonEffacer(x, y):
    fillRectangle(x, x, taille, taille, "#fff")
    for i in range(x, y):
        setPixel(i, x, "#f00")
        setPixel(i, y - 1, "#f00")
        x += 1
        y -= 1

def clear():
    fillRectangle(0, hauteurMenu, largeur, hauteur - hauteurMenu, "#fff")
        
def cadre(x, y, largeur, hauteur):
    fillRectangle(x, y, largeur, hauteur, "#000")
        
        
def fenetre(largeur, hauteur):
    i = -1
    longueurBouton = taille + longueurCadre * 2
    distCoins = taille + espace
    setScreenMode(largeur, hauteur)
    fillRectangle(0, 0, largeur, hauteur, "#fff")
    fillRectangle(0, 0, largeur, hauteurMenu, "#888")
    for x in range(espace, nombreCouleur * distCoins, distCoins):
        cadre(x - 1, espace - 1, longueurBouton, longueurBouton)
        carre(x, espace, taille, taille, i)
        i += 1
    boutonEffacer(espace, espace + taille)
    
def creerBoutons(couleurs, taille, espace, couleurEffacer):
    tabFinal=[]
    #only for empty button
    coin1=struct(x=espace, y=espace)
    coin2=struct(x=espace+taille, y=espace+taille)
    couleur=couleurEffacer
    effacer=True
    tabReset=[struct(coin1,coin2,couleur,effacer)]
    
    tabFinal.extend(tabReset)
    
    --- #3.1 first draft ---
def creerBoutons(couleurs, taille, espace, couleurEffacer):
    tabFinal=[]
    coin1=struct(x=espace, y=espace) 
    coin2=struct(x=espace+taille, y=espace+taille)
    couleur=couleurEffacer
    effacer=True
    tabReset=[struct(coin1,coin2,couleur,effacer)] #only for reset button
    
    tabFinal.extend(tabReset)
    
    def tabCouleur(couleurs, taille, espace):
        
        temp=len(couleurs)             #temporary variable 1 (for the range) for the number of colors displayed
        distCoins=taille+espace        #distance between each upper left corner on x axis
        temp2=0                        #temporary variable 2 (for the elements of the table couleurs)
        couleur=couleurs.pop(0+temp2)  #to pass every color
        
        for _ in range(1,temp+1): #starting at one cauz first color table (excluding reset button)
            xPos=distCoins*_           
            coin1=struct(x=xPos+espace, y=espace)   #only way found that gets the upper left corner
            coin2=struct(x=xPos+distCoins,y=espace+taille) #since its always upper left corner position + espace+taille
            couleur=couleur 
            effacer=False #since there's only one reset button, always false for the colors
            temp2+=1      #so we pass to the next color. should stop when the table is empty?
            tabCouleur=[struct(coin1,coin2,couleur,effacer)] #gives us the color tab
            tabFinal.extend(tabCouleur)  #we add this color to the final tab, that contains the reset button and each color.
                   
    return tabFinal
    
    -----
    
    
def creerBoutons(couleurs, taille, espace, couleurEffacer):
    distCoins = taille + espace
    tab = [struct(coin1 = struct(x = distCoins + espace, y = espace),
           coin2 = struct(x = distCoins * 2, y = distCoins),
           couleur = couleurEffacer,
           effacer = True)]
    numbre = couleur.index(couleurs[0])
    if numbre == 0:
        tab.extend(tab)
    else:
        tabFinal = [struct(coin1 = struct(x = espace + \
                                 (numbre + 1) * distCoins, y = espace),
                    coin2 = struct(x = distCoins*(numbre + 2), y = distCoins),
                    couleur = couleurs[0],
                    effacer = False)]
        tab.extend(tabFinal)
    return tab
    
def trouverBouton(boutons, position):
    coin1_x = boutons[1].coin1.x
    coin1_y = boutons[1].coin1.y
    coin2_x = boutons[1].coin2.x
    coin2_y = boutons[1].coin2.y
    if coin1_x <= position[0] <= coin2_x and coin1_y <= position[1] <= coin2_y:
        return True
    else:
        return None

def boutonSouris(x):
    while True :
        souris = getMouse()
        if souris.button == x:
            return souris
        sleep(0.01)


#It works(print the rectangle) but not finished and not perfect, I think its a bit repetitive, and i dindn't do the tableu "imageOriginale"
#I'll try to fix it, it also would be great if you want to revise them.
#For example : you can try them with "print(dessinerRectangleFlottant([], (90,60), "#f00"))"
def dessinerRectangleFlottant(imageOriginale, debut, couleur):
    while True:
        souris = getMouse()
        largeur = abs(souris.x - debut[0])+1
        hauteur = abs(souris.y - debut[1])+1
        if souris.button == 1:
            clear()
            if souris.x <= debut[0] and hauteurMenu <= souris.y <= debut[1]:
                fillRectangle(souris.x, souris.y, largeur, hauteur,couleur)
            elif souris.x <= debut[0] and souris.y > debut[1]:
                fillRectangle(souris.x, debut[1], largeur, hauteur,couleur)
            elif hauteurMenu <= souris.y <= debut[1]:
                fillRectangle(debut[0], souris.y, largeur, hauteur, couleur)
            elif souris.y > debut[1]:
                fillRectangle(debut[0], debut[1], largeur, hauteur,couleur)
            elif souris.x <= debut[0] and souris.y < hauteurMenu:
                hauteur = abs(hauteurMenu - debut[1])+1
                fillRectangle(souris.x, hauteurMenu, largeur, hauteur,couleur)
            else:
                hauteur = abs(hauteurMenu - debut[1])+1
                fillRectangle(debut[0], hauteurMenu, largeur, hauteur,couleur)
            sleep(0.01)
        if souris.button == 0 :
            boutonSouris(1)
            
            ----- draft 2 of 3.3 -----
            #Nice code btw. I modified very small things, trying to cover every situation. If was not necessary, dont hesitate to revert anything.
            Im working right now on how to integrate imageOriginale to the code so it can be well returned 

def dessinerRectangleFlottant(imageOriginale, debut, couleur):
    imageOriginale=[["#fff"]*largeur]*hauteur
    while True:
        souris = getMouse()
        largeur = abs(souris.x - debut[0])+1
        hauteur = abs(souris.y - debut[1])+1
        if souris.button == 1:
            clear()
            if hauteurMenu <= souris.y:
                if souris.x <= debut[0] and souris.y <= debut[1]:
                    fillRectangle(souris.x, souris.y, largeur, hauteur,couleur)
                elif souris.x <= debut[0] and souris.y > debut[1]:
                    fillRectangle(souris.x, debut[1], largeur, hauteur,couleur)
                elif souris.x >= debut[0] and souris.y <= debut[1]:
                    fillRectangle(debut[0], debut[1], largeur, hauteur,couleur)
                elif souris.x >= debut[0] and souris.y > debut[1]:
                    fillRectangle(souris.x, debut[1], largeur, hauteur,couleur)
                elif souris.y <= debut[1]:
                    fillRectangle(debut[0], souris.y, largeur, hauteur, couleur)
                elif souris.y > debut[1]:
                    fillRectangle(debut[0], debut[1], largeur, hauteur,couleur)    
            else:
                hauteur = abs(hauteurMenu - debut[1])+1
                if souris.x<= debut[0]:
                    fillRectangle(souris.x,hauteurMenu,largeur,hauteur,couleur)
                if souris.x>=debut[0]:
                    fillRectangle(debut[0],hauteurMenu,largeur,hauteur,couleur)
            sleep(0.01)
        if souris.button == 0 :
            boutonSouris(1)
            --------------
